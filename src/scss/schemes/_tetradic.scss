// ==========================================================================
// # Tetradic
// ==========================================================================
// 
// Triadic color scheme is a four-color combination consisting of a base
// color and three colors that are 60 degrees apart from the base color.
//
// | Model | Color     | Chromatic | Harmonized |         | 
// | :---: | :-------: | :-------: | :-------:  | :---:   |
// | RGB   | #8e43e7   | #e7439c   | #d943a8    | 60°     |
// |       |           | #9ce743   | #9ad555    | 180°    |
// |       |           | #43e78e   | #4fcd9c    | 240°    |

// | Model | Color     | Chromatic | Harmonized |         | 
// | :---: | :-------: | :-------: | :-------:  | :---:   |
// | RYB   | #8e43e7   | #e74368   | #d9437c    | 60°     |
// |       |           | #e7d443   | #ddc455    | 180°    |
// |       |           | #a5e743   | #a2d555    | 240°    |
// 
// @debug color.adjust(#8e43e7, $hue: 60);
// @debug color.adjust(#8e43e7, $hue: 180);
// @debug color.adjust(#8e43e7, $hue: 240);
// 
// @debug functions.adjust-hue-ryb(#8e43e7, 60);
// @debug functions.adjust-hue-ryb(#8e43e7, 180);
// @debug functions.adjust-hue-ryb(#8e43e7, 240);
// 

@use "sass:color";
@use "sass:map";

@use "../core";
@use "../functions";

// ==========================================================================
// # Variables
// ==========================================================================

$-base: core.$brand-color;
$-hues: (1: 60, 2: 180, 3: 240);
$-colors: ();

$-name: 'tetradic';

// ==========================================================================
// # Base Colors and Shades
// ==========================================================================

$-shades: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900);

@each $index, $hue in $-hues {
  $color-rgb: color.adjust($-base, $hue: $hue);
  $color-ryb: functions.adjust-hue-ryb($-base, $hue);

  // Conditional harmony application
  @if core.$color-mode-harmony {
    $color-rgb: functions.make-color-harmony($-base, $color-rgb);
    $color-ryb: functions.make-color-harmony($-base, $color-ryb);
  }

  // Generating shades for each base color
  @if core.$color-model-rgb {
    @each $shade in $-shades {
      $rgb-shade-color-name: "#{$-name}-#{$index}-rgb-#{$shade}";
      $rgb-shade-color: functions.make-color-mono($color-rgb, $shade);
      $-colors: map.merge($-colors, ($rgb-shade-color-name: $rgb-shade-color));
    }
  }

  @if core.$color-model-ryb {
    @each $shade in $-shades {
      $ryb-shade-color-name: "#{$-name}-#{$index}-ryb-#{$shade}";
      $ryb-shade-color: functions.make-color-mono($color-ryb, $shade);
      $-colors: map.merge($-colors, ($ryb-shade-color-name: $ryb-shade-color));
    }
  }
}

// ==========================================================================
// # Map Creation
// ==========================================================================

$map-tetradic: core.map-collect($-colors) !default;